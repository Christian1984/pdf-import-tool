// Code generated by go-bindata.
// sources:
// images/icon.png
// DO NOT EDIT!

package res

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x9e\x07\x61\xf8\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x30\x00\x00\x00\x30\x08\x06\x00\x00\x00\x57\x02\xf9\x87\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xe5\x07\x14\x06\x2b\x03\x0c\xf2\xec\x28\x00\x00\x00\x1d\x69\x54\x58\x74\x43\x6f\x6d\x6d\x65\x6e\x74\x00\x00\x00\x00\x00\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\x64\x2e\x65\x07\x00\x00\x07\x02\x49\x44\x41\x54\x68\xde\xed\x9a\x79\x70\x55\x77\x15\xc7\x3f\x77\x79\x6b\x5e\xc2\x4b\x42\x48\x42\x08\x84\x90\x04\xd2\xd2\xb2\x4c\x36\x34\x29\xd5\xd2\xb4\x05\x91\x76\x14\xe4\x0f\xaa\xc8\xe8\x74\xa8\xcc\x20\xea\xb4\x5a\x44\xd1\x32\xf5\x0f\xad\x1d\xa1\x45\xdb\x29\x6d\xe3\x30\x4e\x29\xa3\x85\x21\xc5\x41\xc4\x14\xf8\xc3\x22\x6d\x11\x42\x9a\x66\x64\x8b\x2c\xd9\xd7\xb7\xe4\x6d\xf7\xfe\xfc\xe3\xbe\xbc\xec\xc9\x7b\xcf\x04\xa7\x63\xce\xcc\xfd\xe3\xfd\xee\xfd\x9d\x7b\xce\xef\x6c\xdf\x73\xee\x93\x44\x0d\x82\xcf\x30\xc9\x7c\xc6\x69\x5a\x81\xff\x35\xa9\x31\xef\x10\xe1\x6b\xb2\x8e\x60\x30\x3f\x79\x2a\x15\x10\x80\x06\xa4\xae\x80\xa4\x0a\x50\x6c\xd0\x77\x0d\x3a\x8e\x40\xc0\x05\x12\xc6\x15\x0b\x69\x40\xe2\x42\x70\x7e\x11\xfc\xb7\xa0\xfd\x58\xcc\x3c\xd4\x09\x85\x96\x55\x30\xa5\x80\x73\x15\xe4\xee\x01\xeb\xfc\x91\xcf\x75\xbc\x07\xb7\x5f\x01\xd7\x3f\x40\x73\x81\x16\x18\x5b\x10\x01\xa8\x76\xb0\xe6\xc1\x82\x17\x20\x65\xcd\xc0\xbd\xbe\x7f\xc1\x47\xc5\x10\xea\x89\x5a\x01\x69\xd4\x34\xaa\x01\xaa\x02\xa9\x6b\x20\xf5\xcb\x90\xba\x1a\xcc\x99\x91\xdb\xa1\x90\x40\x55\x25\x02\x41\x1d\xb3\x69\x90\xdd\x83\xad\xd0\x55\x03\xdd\xef\x43\x77\x0d\xb8\x1b\xc2\x6f\x01\x74\xc0\x64\x87\x59\x1b\x21\xfd\x6b\x90\x5c\x19\xd9\xd6\xeb\x0e\x61\xb7\xca\xa8\xaa\x0c\x5d\xa7\xe0\xc2\xaa\xa8\xdd\x49\xd9\xbd\x99\xdd\x43\xc3\xda\x02\x39\x3f\x82\xc2\x83\x90\xf1\x0d\x48\x2a\x01\x25\x11\x80\xf7\xcf\x75\xf0\xd4\x73\xb5\x84\x34\xc1\xf2\x7b\x67\x90\x59\x72\x92\x1b\xb7\xbd\x14\xe4\x38\x48\x4d\x36\x83\x92\x00\x09\x8b\x21\x65\x35\x64\x3c\x09\xe9\x1b\x41\x96\x21\xd0\x04\xd9\x3b\xe0\x9e\x83\x30\x6b\x03\xd8\xf2\x01\xe8\xea\x09\xb2\xe3\xf9\x4f\x78\x6a\x67\x2d\x16\x8b\xcc\x8a\x65\xc9\x06\x8f\xe6\xd7\x41\xf7\xc5\xe1\x42\xe6\x74\x58\x72\x12\x12\xee\x33\x4e\x5a\x13\xf4\x74\x05\x38\x71\xa6\x9d\x9f\xbc\xf4\x29\x57\x1b\x5c\x60\x55\x58\x57\x99\x01\x40\xdb\x9d\x3e\xf6\xbf\x79\x83\xfd\xbf\xbd\x4a\x6e\x61\x12\xdb\xb7\xcc\x67\xdd\xc3\x19\xa4\x3a\x4d\x38\x12\x9c\xe0\x58\x0a\xf9\xfb\x8d\xab\xdf\x48\x41\x9d\x96\x0e\x1f\xbf\x7a\xed\x2a\xbf\x79\xe3\x3a\x68\x02\x64\x68\x6e\x0d\x10\x31\x97\xa4\xc6\x11\x03\x3a\x90\xbf\x2f\x22\xfc\xd1\x93\x2d\x1c\x3b\xd5\xc2\xb1\xbf\xb6\xd0\xda\xe8\x01\x9b\x02\x56\x05\x59\x1e\xe6\xdc\xaa\x04\x0e\x95\x6b\x37\x3c\x6c\x7f\xe6\x22\xdf\x75\xd4\x51\x51\x9c\xc2\x83\x65\x33\x79\xb0\x2c\x85\xf2\xa2\x54\x4c\x26\x09\x4d\x17\xbc\xf7\xb7\x56\x0e\x1d\xbb\xc3\x3b\xc7\xef\x10\x72\x87\xc0\xa2\x18\xfb\x75\x11\x7b\x02\x18\xa1\x80\xa2\x42\xda\x7a\x00\xbe\xbf\xe7\x13\xf6\x55\xdd\x20\x18\xd0\x40\x32\x04\x9c\xd8\x19\x25\x48\x50\x11\x02\xce\x9c\xeb\xe4\xcc\xb9\x4e\x7e\xfd\xba\xc2\xa2\xbc\x44\xce\x1f\x2d\x67\xeb\xce\x5a\xaa\xfe\x78\x8b\x80\x5f\x03\x59\x02\xab\x32\x89\x85\x4c\x00\x96\x39\x91\xc5\xc3\x7f\x6e\x22\x18\xd2\x8d\x17\xc5\x73\x32\xe1\x94\xea\xf6\x6a\xb4\xb6\xfb\x01\xe8\xec\x09\x12\xf0\x85\x85\x9f\x9a\x4a\xac\x0f\x2c\x4e\xee\x3b\xa6\xa1\xc4\xb4\x02\xd3\x0a\x4c\x2b\x30\x99\x70\x7a\xca\x49\x80\xe6\x35\xf0\xd8\xf0\xd4\x2c\x4f\x92\x02\xba\x1e\xc6\x7f\xbd\x21\x08\xea\xe3\xe2\xe8\x5e\x77\x08\x00\x6f\x9f\x06\xae\x90\x51\xf0\x46\x30\x14\xf8\xfd\x61\x89\xd5\x24\x28\x78\x19\x34\xdf\x50\xb6\xbd\xe7\xa1\xf9\xad\x61\xcd\x48\x3f\x1a\x15\x80\x6d\x2e\x94\x35\x02\x90\x53\x7e\x8a\xc6\xdb\x7d\xa3\x1e\x4e\x7a\x9a\x85\x43\x2f\x2f\x67\x65\x69\xea\xdd\x37\x8e\xeb\x3c\x5c\x5a\x03\xc1\xb6\x38\x1b\x1a\x01\xd5\x07\x8a\x29\xba\xdf\xc9\xe5\x06\x17\xdd\xae\x20\xd2\xd4\x3b\x14\x66\x93\x4c\xc9\x12\x27\x24\x16\x43\xc1\x2b\x50\xbb\x21\xe2\x4e\xd1\x2b\x10\xd2\x59\xfb\x68\x26\x45\xf7\x3b\x39\x7c\xfc\x0e\x4f\xef\xba\x8c\xdf\xaf\xdf\x95\x83\xd7\x75\xc1\xd6\x4d\xf3\xf8\xe5\x73\xf7\x18\x78\x4d\x31\x83\x08\xc4\xa8\x80\x0e\xd9\xb3\x6d\x00\x7c\x78\xa9\x87\xf6\x36\xff\xe8\xfe\x3c\x45\x74\xa8\xba\xc9\x50\x00\xc0\x92\x09\x7d\x8d\x20\xc5\x98\x46\x85\x08\x07\x90\x24\xc1\x5d\xc6\x4b\xb2\x3c\xdc\xb1\xfe\xef\xea\x80\x2e\xc6\x3f\x74\x01\x16\x8b\x8c\x23\x41\x45\xd3\x04\x3d\xae\x20\x42\x44\x1f\xa9\x0e\x87\x8a\xd5\x2c\xd3\xe7\xd7\xf0\x78\xb4\xa8\x2d\x3c\xb1\x05\x82\x3a\xf8\x75\x2a\x56\xa6\xf1\xf8\x23\x19\x63\x0a\x90\x99\x6e\xa5\xea\xc5\xa5\x7c\x78\xb4\x9c\xd3\x6f\xaf\xe0\x3b\x5f\xcf\x19\xd9\xbd\x8d\x46\x7e\x9d\x75\x95\x19\x9c\xa8\x2a\xe5\xa3\xea\x0a\xde\x7d\xb5\x98\xf2\x92\x94\x78\x2c\x30\xf0\x32\x4d\x13\x46\x9b\xe7\xd3\xa8\x7c\x24\x93\x5f\x3c\xb3\x88\xc2\x3c\x07\xb6\xb1\xba\x28\x6f\x88\x23\xaf\x16\x51\xb2\xd4\x19\x59\xda\xb7\x7b\x31\xf5\x57\xdc\x9c\x3a\xdb\x36\x76\x83\xa1\x09\xf2\x17\x26\x72\xe4\xb5\xa2\xc8\xd2\xdc\xd9\x36\x72\xb3\xed\x94\x3c\x7e\x96\xce\xee\x60\x94\x16\x90\x18\x32\x8b\x79\xe2\xd1\x4c\x1e\x28\x9b\xc9\xa5\xd3\x0f\x71\xe2\xf7\xa5\x2c\x5f\x3c\x63\x6c\xe1\x75\xc1\xcc\x39\xf6\x21\xc2\xf7\xd3\x96\xf5\x73\x21\x38\x8e\x1f\x05\x74\xb6\x6c\xc8\x1e\xb1\xbc\x60\x9e\x9d\x9c\x2c\x3b\xd1\xcc\xcd\x07\x2c\x10\xe8\x86\xce\xbf\x20\x52\x2a\xd9\xfb\xd3\x7b\x87\x3e\xe5\xb9\x0c\x1d\xd5\x30\xfb\x69\xa3\xd4\x0f\x23\xdf\x18\xf5\xc0\xed\x0d\x4d\xd8\x7a\xba\x3d\xa3\x3f\x13\xd2\x44\x8c\x31\x20\x03\xf5\x9b\x90\xba\x4e\x0e\x9a\x94\x35\x40\xed\x6a\xb8\xf0\x79\xb8\xf9\x22\xe8\xa3\xc0\x0b\x59\xc2\xdd\x1d\xe0\xcd\xc3\x37\x47\xdc\xda\xfb\xd6\x75\x30\x8f\x13\x66\x16\x85\x97\x0e\x5c\x37\xfa\xef\x41\xf4\xc1\x85\x2e\xae\xdd\xf4\x46\x15\xc8\x43\xb3\x50\xb0\x0d\x3e\xae\x04\x5b\x9a\xa1\x91\xaf\x65\x60\xe6\x69\x9a\x39\x36\x68\x33\xcb\x7c\xfb\x87\x97\xf0\xfa\x34\xd6\xad\xca\xc0\xe5\x09\xf1\xbd\x3d\x75\xd4\x35\xb8\x86\x6e\xe9\x07\x81\xfd\x31\x21\x19\x20\x2f\x6f\x65\x0d\x7f\xd8\xbb\x8c\xdc\x6c\x3b\xff\xac\x77\xf1\xad\x67\x2f\xe2\x76\x87\xe2\x50\x00\x40\x01\xfc\x6d\x31\x57\x09\x4d\x13\x6c\xfb\xc1\x45\xb6\xd9\x6a\xc1\xa7\x1b\xf3\x1e\xd3\x50\x06\x9b\xbe\x92\x4d\x82\x4d\xe1\xe0\xbb\xb7\xf0\xf4\x69\x11\x25\xfe\x7d\xd3\x4b\xf9\xea\xb3\xc6\xec\xc9\x13\x02\xbb\x12\xf5\x64\x41\x1d\x73\x2c\x12\xcf\x28\xc5\x1e\x0e\x74\xdb\xb0\x80\xf7\x84\x78\xfb\x40\x09\x5f\x5d\x9d\x89\xa2\x48\x7c\x73\xfd\x1c\xca\x2a\x4f\x43\x82\x3a\x30\x53\xea\xdf\xeb\x88\x0d\xe1\x4f\x7d\x25\x16\xb0\xa4\x28\x85\xc7\xbe\x30\x0b\x25\x8c\x9d\x4a\x97\x26\xf3\xa5\xb5\x59\x10\xf8\xef\xc1\xe0\x94\x2b\x20\xc9\xb0\x71\xed\x6c\x92\x1c\x2a\x08\x0d\x02\xcd\x00\xfc\x6c\x47\xc1\xa4\x80\x41\x39\xde\x53\x8d\xf6\xdb\x66\xa2\x43\x65\xe3\xda\x2c\xe3\x47\x77\x0d\x34\xbe\x00\x08\x16\x2d\x70\xf0\x50\x45\xda\x40\x60\x4f\x8c\x64\x46\xf5\xf1\xe8\x15\xd0\x7d\x91\xe9\x5d\x56\x86\x05\xd5\x3c\xfe\x56\x49\x02\x9b\x55\x61\xd7\xb6\x7c\x72\xe6\x18\x30\x9c\xeb\x3b\xa1\xfd\x28\x04\xdb\xb1\xdb\x14\x9e\xdd\x9a\x47\x46\xba\x35\x2a\xc8\x71\xdf\xc2\xc4\x41\x19\xa3\x77\x58\x4b\x19\x55\x9a\x01\x96\x1d\x87\x94\xc7\xf0\xfa\x34\xde\xa9\x6e\xa2\xb3\x3b\x80\x24\x49\xa3\x18\x48\x60\x52\x24\x4a\x96\x38\x29\x5d\x96\x8c\x00\xa4\xe6\x2a\xa8\xdb\x6c\x3c\x90\xbb\x0b\xe6\xff\x1c\x80\xfa\x2b\x6e\x6a\x3e\xe8\xc0\xe7\xd3\x46\xe7\x25\x04\x26\x93\xcc\x93\x4f\x64\xe1\x4c\x32\x81\xf7\x53\xf8\x7b\xa1\x91\x2d\x63\x52\x40\x00\x66\x27\x14\x37\x80\x79\x56\x6c\x2e\xd7\xfe\x27\xa8\xdf\x6c\x7c\x7e\xea\xa7\x79\x3f\x86\xf9\xcf\xc7\xd8\x9a\xf9\xe1\xe3\x52\x70\x5f\x8c\xc3\x02\x91\x3a\x61\x87\x82\xdf\xc1\x8c\x07\x8c\x08\x1d\x2f\xbc\x02\xb7\xe1\xd6\x3e\x68\x3a\x38\xd2\x59\x05\xe0\xfc\x1c\xe4\xec\x06\x7b\xe1\x04\x41\x25\x1b\x27\x7f\x65\x3b\xb8\xeb\x86\xa4\x79\x29\xae\xbf\x1a\x68\x51\xd6\x0a\x3d\x1c\x65\xf2\x38\x56\xd5\xa3\xe4\x25\xc2\x7c\xa4\xc9\x18\x6c\x29\x93\x94\xe3\xa4\x18\x78\x4d\xcf\x46\xa7\x15\x98\x1a\xfa\x0f\xed\x1b\x67\x00\xcf\x11\x33\xc1\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x8a\x0c\x2e\xf1\x9e\x07\x00\x00")

func iconPngBytes() ([]byte, error) {
	return bindataRead(
		_iconPng,
		"icon.png",
	)
}

func iconPng() (*asset, error) {
	bytes, err := iconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icon.png", size: 1950, mode: os.FileMode(438), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"icon.png": iconPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"icon.png": &bintree{iconPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

